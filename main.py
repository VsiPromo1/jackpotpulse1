# -*- coding: utf-8 -*-
import telebot
import random
import time
import threading
import os
import sqlite3

TOKEN = os.getenv('TOKEN')
if not TOKEN:
    raise ValueError("‚ùóÔ∏è TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

bot = telebot.TeleBot(TOKEN, parse_mode='HTML')

DB_FILE = 'users_data.db'
ADMIN_ID = 7262164512

sponsor_channels = ['@Vsi_PROMO', '@uaclub_casinoman']

jokes = [
    "–§–∞—Ä—Ç –ø–æ—Å—Ç—É–∫–∞–≤ ‚Äî –Ω–µ –ø—Ä–∏–∫–∏–¥–∞–π—Å—è, —â–æ —Ç–µ–±–µ –Ω–µ–º–∞—î –≤–¥–æ–º–∞.",
    "–ö—Ä–∞—â–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—â–∞—Å—Ç–∏—Ç–∏, –Ω—ñ–∂ —Å—Ç–æ —Ä–∞–∑—ñ–≤ –ø–æ—à–∫–æ–¥—É–≤–∞—Ç–∏.",
    "–§–∞—Ä—Ç ‚Äî —Ü–µ –∫–æ–ª–∏ –∑–∞ —Ç–µ–±–µ –≥—Ä–∞—é—Ç—å –Ω–∞–≤—ñ—Ç—å –ª—ñ—Ö—Ç–∞—Ä—ñ –Ω–∞ –≤—É–ª–∏—Ü—ñ.",
    "–Ø–∫—â–æ –Ω–µ –ø–æ—â–∞—Å—Ç–∏–ª–æ, –ø–æ—á–µ–∫–∞–π ‚Äì —Å–∫–æ—Ä–æ –ø–æ–≤–µ–∑–µ!",
]

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
import shutil
import logging
# –õ–æ–≥—É–≤–∞–Ω–Ω—è —É —Ñ–∞–π–ª
logging.basicConfig(filename='bot_log.txt', level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect(DB_FILE, check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    balance INTEGER DEFAULT 0,
    last_bonus INTEGER DEFAULT 0,
    last_card INTEGER DEFAULT 0,
    streak INTEGER DEFAULT 0,
    referrals INTEGER DEFAULT 0,
    tickets INTEGER DEFAULT 0,
    last_active INTEGER DEFAULT 0,
    referral_from INTEGER,
    lottery_participation INTEGER DEFAULT 0
)
''')
conn.commit()

def save_user(user_id, **kwargs):
    fields = ', '.join(f"{k} = ?" for k in kwargs)
    values = list(kwargs.values()) + [user_id]
    cursor.execute(f"UPDATE users SET {fields} WHERE user_id = ?", values)
    conn.commit()

def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        columns = [desc[0] for desc in cursor.description]
        return dict(zip(columns, row))
    return None

def create_user(user_id, referral_from=None):
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, balance, last_bonus, last_card, streak, referrals, tickets, last_active, referral_from, lottery_participation)
        VALUES (?, 0, 0, 0, 0, 0, 0, ?, ?, 0)
    ''', (user_id, int(time.time()), referral_from))
    conn.commit()

def reset_user(user_id):
    cursor.execute('''
        UPDATE users SET balance = 0, last_bonus = 0, last_card = 0, streak = 0, referrals = 0,
        tickets = 0, last_active = ?, referral_from = NULL, lottery_participation = 0
        WHERE user_id = ?
    ''', (int(time.time()), user_id))
    conn.commit()

def check_subscriptions(user_id):
    try:
        for channel in sponsor_channels:
            member = bot.get_chat_member(channel, user_id)
            if member.status in ['left', 'kicked']:
                return False
        return True
    except Exception as e:
        print("Subscription check error:", e)
        return False

def get_channels_buttons():
    markup = telebot.types.InlineKeyboardMarkup()
    for ch in sponsor_channels:
        markup.add(telebot.types.InlineKeyboardButton(text=ch, url=f"https://t.me/{ch.strip('@')}"))
    markup.add(telebot.types.InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subs"))
    return markup

main_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.row('üéÅ –©–æ–¥–µ–Ω–Ω–∏–π —Ñ–∞—Ä—Ç', 'üÉè –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞')
main_keyboard.row('üèÜ –†–æ–∑—ñ–≥—Ä–∞—à—ñ', 'üëØ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
main_keyboard.row('üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', 'üì¢ –°–ø–æ–Ω—Å–æ—Ä–∏ / –ù–æ–≤–∏–Ω–∏')
main_keyboard.row('‚≠êÔ∏è –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤')
main_keyboard.row('üì£ –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –∫–∞–Ω–∞–ª —É Jackpot Pulse')

welcome_text = (
    "<b>üé∞ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ Jackpot Pulse!</b>\n\n"
    "<b>‚úÖ –©–æ —Ç—É—Ç –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è:</b>\n"
    "‚Ä¢ üéÅ –©–æ–¥–Ω—è –∑–∞—Ö–æ–¥–∏—à ‚Üí –æ—Ç—Ä–∏–º—É—î—à –±–æ–Ω—É—Å PulseCoins (15‚Äì100)\n"
    "‚Ä¢ üÉè –í—ñ–¥–∫—Ä–∏–≤–∞—î—à –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∏ ‚Üí –ª–æ–≤–∏—à –ø—Ä–∏–∑–∏\n"
    "‚Ä¢ üëØ –ó–∞–ø—Ä–æ—à—É—î—à –¥—Ä—É–∑—ñ–≤ ‚Üí —â–µ –±—ñ–ª—å—à–µ PulseCoins\n"
    "‚Ä¢ üèÜ –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö —Ä–µ–∞–ª—å–Ω–∏—Ö –≥—Ä–æ—à–µ–π\n\n"
    "<b>‚ö†Ô∏è –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –Ω–∞ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏.</b>\n"
    "<i>‚ö†Ô∏è –Ø–∫—â–æ –≤—ñ–¥–ø–∏—Å—É—î—à—Å—è –≤—ñ–¥ –±—É–¥—å-—è–∫–æ–≥–æ –∫–∞–Ω–∞–ª—É ‚Äî –≤—Å—ñ –±–æ–Ω—É—Å–∏ —Ç–∞ —É—á–∞—Å—Ç—å –∞–Ω—É–ª—é—é—Ç—å—Å—è!</i>\n"
    "<b>üî• –ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–≤—ñ–π —à–ª—è—Ö –¥–æ –¥–∂–µ–∫–ø–æ—Ç—É!</b>"
)

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = message.from_user.id
    ref_id = None
    args = message.text.split()
    if len(args) > 1:
        try:
            ref_id = int(args[1])
        except:
            pass
    user = get_user(user_id)
    if not user:
        create_user(user_id, referral_from=ref_id)
        if ref_id and ref_id != user_id:
            ref_user = get_user(ref_id)
            if ref_user:
                new_referrals = ref_user['referrals'] + 1
                save_user(ref_id, referrals=new_referrals)
                try:
                    bot.send_message(ref_id, f"<b>üéâ –£ —Ç–µ–±–µ –Ω–æ–≤–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª: {message.from_user.first_name} (@{message.from_user.username})</b>")
                except:
                    pass
    else:
        save_user(user_id, last_active=int(time.time()))

    bot.send_message(message.chat.id, welcome_text, reply_markup=main_keyboard)
    bot.send_message(message.chat.id, "<b>üîó –ù–∞—à—ñ –∫–∞–Ω–∞–ª–∏ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏:</b>", reply_markup=get_channels_buttons())

@bot.message_handler(func=lambda m: m.text == 'üéÅ –©–æ–¥–µ–Ω–Ω–∏–π —Ñ–∞—Ä—Ç')
def daily_bonus(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return

    user = get_user(user_id)
    now = int(time.time())
    if now - user['last_bonus'] < 86400:
        bot.send_message(message.chat.id, "<b>üïê –¢–∏ –≤–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ –æ—Ç—Ä–∏–º–∞–≤ —Ñ–∞—Ä—Ç! –ó–∞–≤—ñ—Ç–∞–π –∑–∞–≤—Ç—Ä–∞ üòâ</b>", reply_markup=main_keyboard)
        return

    bonus = random.randint(15, 100)
    new_balance = user['balance'] + bonus
    new_streak = user['streak'] + 1

    save_user(user_id, balance=new_balance, last_bonus=now, streak=new_streak, last_active=now)

bot.send_message(message.chat.id,
    f"<b>üîÆ –ü—É–ª—å—Å —É–¥–∞—á—ñ –±‚Äô—î—Ç—å—Å—è —Ä—ñ–≤–Ω–æ üëä</b>\n"
    f"<b>+{bonus} PulseCoins üí∏</b>\n"
    f"<b>üî• –°—Ç—Ä—ñ–∫:</b> {new_streak} –¥–Ω—ñ(–≤)",
    reply_markup=main_keyboard)



@bot.message_handler(func=lambda m: m.text == 'üÉè –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞')
def fart_card(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return

    user = get_user(user_id)
    now = int(time.time())
    if now - user['last_card'] < 86400:
        bot.send_message(message.chat.id, "<b>‚è≥ –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫—É –º–æ–∂–Ω–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –ª–∏—à–µ —Ä–∞–∑ –Ω–∞ –¥–æ–±—É. –ó–∞—Ö–æ–¥—å –∑–∞–≤—Ç—Ä–∞!</b>", reply_markup=main_keyboard)
        return

    outcomes = [
        ("üí∞ <b>+50 PulseCoins!</b>", 50),
        ("üéü <b>–ö–≤–∏—Ç–æ–∫ –Ω–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à!</b>", 0),
        (f"ü§£ <i>{random.choice(jokes)}</i>", 0),
        ("ü§∑‚Äç‚ôÇÔ∏è <b>–ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–ø–∞–ª–æ —Ü—å–æ–≥–æ —Ä–∞–∑—É. –°–ø—Ä–æ–±—É–π —â–µ!</b>", 0)
    ]

    text, coins = random.choice(outcomes)
    tickets = user['tickets'] + 1 if "–ö–≤–∏—Ç–æ–∫" in text else user['tickets']
    balance = user['balance'] + coins if coins > 0 else user['balance']

    save_user(user_id, last_card=now, last_active=now, tickets=tickets, balance=balance)

    bot.send_message(
    message.chat.id,
    f"<b>üÉè –¢–≤–æ—è —Ñ–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞ –ø–æ–∫–∞–∑—É—î:</b>\n\n{text}",
    reply_markup=main_keyboard
)



@bot.message_handler(func=lambda m: m.text == 'üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å')
def my_profile(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user:
        bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å —â–µ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–∞—Ç–∏—Å–Ω–∏ /start</b>", reply_markup=main_keyboard)
        return

    save_user(user_id, last_active=int(time.time()))

bot.send_message(
    message.chat.id,
    f"<b>üìä –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:</b>\n"
    f"ü™ô PulseCoins: {user['balance']}\n"
    f"üìÜ –°—Ç—Ä—ñ–∫: {user['streak']} –¥–Ω—ñ(–≤)\n"
    f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: {user['referrals']}\n"
    f"üéü –ö–≤–∏—Ç–∫—ñ–≤ –Ω–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à: {user['tickets']}",
    reply_markup=main_keyboard
)



@bot.message_handler(func=lambda m: m.text == 'üëØ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
def invite_friend(message):
    user_id = message.from_user.id
    ref_link = f"https://t.me/JackpotPulse_bot?start={user_id}"
    bot.send_message(message.chat.id,
bot.send_message(
    message.chat.id,
    f"<b>üëØ –ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤!</b>\n"
    f"üîó –¢–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {ref_link}\n"
    f"‚úÖ –ó–∞ –∫–æ–∂–Ω–æ–≥–æ ‚Äî +20 PulseCoins\nüéØ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å 3 –¥–Ω—ñ ‚Äî —â–µ +10",
    reply_markup=main_keyboard
)



@bot.message_handler(func=lambda m: m.text == '‚≠êÔ∏è –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤')
def show_top5(message):
    cursor.execute("SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 5")
    top5 = cursor.fetchall()

    if not top5:
        bot.send_message(message.chat.id, "<b>‚ùå –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤.</b>")
        return

text = "<b>üèÜ –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ PulseCoins:</b>\n"

for i, (uid, balance) in enumerate(top5, start=1):
    try:
        user_info = bot.get_chat(uid)
        uname = f"@{user_info.username}" if user_info.username else f"<code>{uid}</code>"
    except Exception:
        uname = f"<code>{uid}</code>"
    text += f"{i}. {uname} ‚Äî <b>{balance}</b> PulseCoins\n"

bot.send_message(message.chat.id, text, parse_mode='HTML')


    bot.send_message(message.chat.id, text)


@bot.message_handler(func=lambda m: m.text == 'üèÜ –†–æ–∑—ñ–≥—Ä–∞—à—ñ')
def lottery(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return

    user = get_user(user_id)
    tickets = user['tickets']

    info = (
text = "<b>üèÜ –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ PulseCoins:</b>\n"

for i, (uid, balance) in enumerate(top5, start=1):
    try:
        user_info = bot.get_chat(uid)
        uname = f"@{user_info.username}" if user_info.username else f"<code>{uid}</code>"
    except:
        # –ü—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –±—É–¥—å-—è–∫—É –ø–æ–º–∏–ª–∫—É
        uname = f"<code>{uid}</code>"
    text += f"{i}. {uname} ‚Äî <b>{balance}</b> PulseCoins\n"

bot.send_message(message.chat.id, text, parse_mode='HTML')

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å", callback_data="join_lottery"))
    bot.send_message(message.chat.id, info, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "join_lottery")
def handle_join_lottery(call):
    user_id = call.from_user.id
    user = get_user(user_id)
    if not user:
        bot.answer_callback_query(call.id, "‚ùóÔ∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω–∏ /start")
        return

    method = None
    if user['tickets'] >= 15:
        save_user(user_id, tickets=user['tickets'] - 15)
        method = "–∫–≤–∏—Ç–∫–∏"
    elif user['balance'] >= 1000:
        save_user(user_id, balance=user['balance'] - 1000)
        method = "PulseCoins"
    elif user['referrals'] >= 25:
        save_user(user_id, referrals=user['referrals'] - 25)
        method = "–¥—Ä—É–∑—ñ"
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É–º–æ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ!")
        return

    save_user(user_id, lottery_participation=1)
    bot.answer_callback_query(call.id, "‚úÖ –¢–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!")

    try:
        user_info = bot.get_chat(user_id)
        uname = f"@{user_info.username}" if user_info.username else user_info.first_name
        bot.send_message(ADMIN_ID, f"üéü –ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: <b>{uname}</b>, —á–µ—Ä–µ–∑ {method}")
    except:
        pass


@bot.message_handler(func=lambda m: m.text == 'üì¢ –°–ø–æ–Ω—Å–æ—Ä–∏ / –ù–æ–≤–∏–Ω–∏')
def sponsors_news(message):
    text = "<b>üì¢ –ù–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏ —Ç–∞ –Ω–æ–≤–∏–Ω–∏:</b>"
    markup = get_channels_buttons()
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "check_subs")
def callback_check_subs(call):
    user_id = call.from_user.id
    if check_subscriptions(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –í—Å—ñ –∫–∞–Ω–∞–ª–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ!")
    else:
        reset_user(user_id)
        bot.answer_callback_query(call.id, "‚ùå –¢–∏ –≤—ñ–¥–ø–∏—Å–∞–≤—Å—è –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –∑ –∫–∞–Ω–∞–ª—ñ–≤. –¢–≤–æ—ó –±–æ–Ω—É—Å–∏ –∞–Ω—É–ª—å–æ–≤–∞–Ω—ñ!")
        bot.send_message(user_id, "<b>‚ùóÔ∏è –¢–∏ –≤—ñ–¥–ø–∏—Å–∞–≤—Å—è –≤—ñ–¥ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤.
–£—Å—ñ –±–æ–Ω—É—Å–∏ —Å–∫–∏–Ω—É—Ç–æ. –ü—ñ–¥–ø–∏—à–∏—Å—å –∑–Ω–æ–≤—É, —â–æ–± –≥—Ä–∞—Ç–∏!</b>")


@bot.message_handler(func=lambda m: m.text == 'üì£ –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –∫–∞–Ω–∞–ª —É Jackpot Pulse')
def add_channel_request(message):
    bot.send_message(
    message.chat.id,
    "<b>üì£ –•–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –∫–∞–Ω–∞–ª —É Jackpot Pulse?</b>\n"
    "–ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –Ω–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤:\n"
    "üë§ @vsi_promo_admin\n"
    "üë§ @oleksandra_managerr\n"
    "–í–æ–Ω–∏ –¥–æ–ø–æ–º–æ–∂—É—Ç—å —Ç–æ–±—ñ –∑ —Ä–µ–∫–ª–∞–º–æ—é —Ç–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü–µ—é!",
    reply_markup=main_keyboard,
    parse_mode='HTML'
)



@bot.message_handler(commands=['send_promo'])
def send_promo_to_all(message):
    if message.from_user.id != ADMIN_ID:
        return

    promo_text = (
        "<b>üì£ –£–í–ê–ì–ê –í–°–Ü–ú –í–õ–ê–°–ù–ò–ö–ê–ú –ö–ê–ù–ê–õ–Ü–í!</b>
        "‚≠êÔ∏è <b>–•–æ—á–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ —Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ –≤ Jackpot Pulse?</b> ‚≠êÔ∏è
        "üéØ –ü—Ä–∏–≤–µ–¥–∏ –Ω–∞–π–±—ñ–ª—å—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ ‚Äî —ñ —Ç–≤—ñ–π –∫–∞–Ω–∞–ª –ë–ï–ó–ö–û–®–¢–û–í–ù–û –æ—Ç—Ä–∏–º–∞—î —Ä–µ–∫–ª–∞–º—É –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ –Ω–∞ 1 –¥–µ–Ω—å! üöÄ
        "üî• <i>–¶–µ —á—É–¥–æ–≤–∏–π —à–∞–Ω—Å –∑–±—ñ–ª—å—à–∏—Ç–∏ —Å–≤–æ—é –∞—É–¥–∏—Ç–æ—Ä—ñ—é —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—Ä—É—Ç–∏–π –±–æ–Ω—É—Å!</i>
        "üë• –ß–∏–º –±—ñ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ —Ç–∏ –ø—Ä–∏–≤–µ–¥–µ—à ‚Äî —Ç–∏–º –±—ñ–ª—å—à–∞ —Ç–≤–æ—è –ø–µ—Ä–µ–º–æ–≥–∞!
        "üì© –ü–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –¥–ª—è —É—á–∞—Å—Ç—ñ:
        "üë§ @vsi_promo_admin
        "üë§ @oleksandra_managerr
        "–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏! üéâ"
    )

    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    count = 0

    for (uid,) in users:
        try:
            bot.send_message(uid, promo_text)
            count += 1
            time.sleep(0.1)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è {uid}: {e}")

    bot.send_message(message.chat.id, f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")


@bot.message_handler(commands=['runlottery'])
def run_lottery(message):
    if message.from_user.id != ADMIN_ID:
        return

    cursor.execute("SELECT user_id FROM users WHERE lottery_participation = 1")
    participants = [row[0] for row in cursor.fetchall()]

    if not participants:
        bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É.</b>")
        return

    random.shuffle(participants)
    winners = participants[:5]

    result = "<b>üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É:</b>

    for idx, uid in enumerate(winners, start=1):
        try:
            user_info = bot.get_chat(uid)
            uname = f"@{user_info.username}" if user_info.username else f"<code>{uid}</code>"
            result += f"{idx}. {uname}
            cursor.execute("UPDATE users SET lottery_participation = 0 WHERE user_id = ?", (uid,))
            conn.commit()
        except Exception as e:
            result += f"{idx}. ‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid} (–ø–æ–º–∏–ª–∫–∞: {e})
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {uid}: {e}")

    bot.send_message(message.chat.id, result)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –±–∞–∑–∏ –∫–æ–∂–Ω—ñ 12 –≥–æ–¥–∏–Ω
def backup_database():
    while True:
        try:
            shutil.copyfile(DB_FILE, 'users_data_backup.db')
            logging.info("üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è –±–∞–∑–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∞")
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: {e}")
        time.sleep(43200)  # –∫–æ–∂–Ω—ñ 12 –≥–æ–¥–∏–Ω

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—É —â–æ–≤—ñ–≤—Ç–æ—Ä–∫–∞ –æ 19:00
def auto_lottery():
    while True:
        now = time.localtime()
        if now.tm_wday == 1 and now.tm_hour == 19 and now.tm_min == 0:
            class DummyMessage:
                from_user = type('user', (), {'id': ADMIN_ID})
                chat = type('chat', (), {'id': ADMIN_ID})
            run_lottery(DummyMessage())
            time.sleep(60)
        time.sleep(30)

# –ö–æ–º–∞–Ω–¥–∞ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@bot.message_handler(commands=['stats'])
def show_stats(message):
    if message.from_user.id != ADMIN_ID:
        return

    cursor.execute("SELECT COUNT(*) FROM users")
    total = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM users WHERE last_active > ?", (int(time.time()) - 86400,))
    active_today = cursor.fetchone()[0]

    bot.send_message(message.chat.id, f"üë• –£—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total}
üïí –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞ 24 –≥–æ–¥: {active_today}")

# –§–æ–Ω–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–æ–∫ –∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏

def auto_check_subscriptions():
    while True:
        logging.info("üîç –ü–æ—á–∞—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—ñ–¥–ø–∏—Å–æ–∫...")
        cursor.execute("SELECT user_id FROM users")
        all_users = cursor.fetchall()
        for (user_id,) in all_users:
            if not check_subscriptions(user_id):
                reset_user(user_id)
                try:
                    bot.send_message(user_id, "<b>‚ùóÔ∏è –¢–∏ –≤—ñ–¥–ø–∏—Å–∞–≤—Å—è –≤—ñ–¥ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤, —É—Å—ñ –±–æ–Ω—É—Å–∏ –∞–Ω—É–ª—å–æ–≤–∞–Ω–æ. –ü—ñ–¥–ø–∏—à–∏—Å—å –∑–Ω–æ–≤—É, —â–æ–± –≥—Ä–∞—Ç–∏!</b>")
                    logging.info(f"üö´ –í—ñ–¥–ø–∏—Å–∞–≤—Å—è: {user_id} ‚Äî —Å–∫–∏–Ω—É—Ç–æ –¥–∞–Ω—ñ")
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")
        time.sleep(7200)  # –∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏
threading.Thread(target=backup_database, daemon=True).start()
threading.Thread(target=auto_lottery, daemon=True).start()
threading.Thread(target=auto_check_subscriptions, daemon=True).start()

# –§–æ–Ω–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —â–æ–¥–Ω—è –≤—Ä–∞–Ω—Ü—ñ

def daily_reminder():
    while True:
        now = time.localtime()
        if now.tm_hour == 10 and now.tm_min == 0:  # –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ 10:00 —Ä–∞–Ω–∫—É
            cursor.execute("SELECT user_id FROM users")
            users = cursor.fetchall()
            for (uid,) in users:
                try:
                    bot.send_message(uid, "<b>üîî –ù–µ –∑–∞–±—É–¥—å —Å—å–æ–≥–æ–¥–Ω—ñ –∑–∞–π—Ç–∏ –≤ Jackpot Pulse, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π —Ñ–∞—Ä—Ç —ñ –ø—Ä–∏–∑–∏!</b>")
                    time.sleep(0.1)
                except Exception as e:
                    logging.warning(f"‚ùóÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è {uid}: {e}")
            time.sleep(60)  # —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º —Ö–≤–∏–ª–∏–Ω–∏
        time.sleep(30)

threading.Thread(target=daily_reminder, daemon=True).start()
