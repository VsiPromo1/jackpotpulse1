
# -*- coding: utf-8 -*-
import telebot
import random
import time
import threading
import os
import sqlite3
import shutil
import logging

TOKEN = os.getenv('TOKEN')
if not TOKEN:
    raise ValueError("‚ùóÔ∏è TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

bot = telebot.TeleBot(TOKEN, parse_mode='HTML')

DB_FILE = 'users_data.db'
ADMIN_ID = 7262164512

sponsor_channels = ['@Vsi_PROMO', '@uaclub_casinoman']

jokes = [
    "–§–∞—Ä—Ç –ø–æ—Å—Ç—É–∫–∞–≤ ‚Äî –Ω–µ –ø—Ä–∏–∫–∏–¥–∞–π—Å—è, —â–æ —Ç–µ–±–µ –Ω–µ–º–∞—î –≤–¥–æ–º–∞.",
    "–ö—Ä–∞—â–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—â–∞—Å—Ç–∏—Ç–∏, –Ω—ñ–∂ —Å—Ç–æ —Ä–∞–∑—ñ–≤ –ø–æ—à–∫–æ–¥—É–≤–∞—Ç–∏.",
    "–§–∞—Ä—Ç ‚Äî —Ü–µ –∫–æ–ª–∏ –∑–∞ —Ç–µ–±–µ –≥—Ä–∞—é—Ç—å –Ω–∞–≤—ñ—Ç—å –ª—ñ—Ö—Ç–∞—Ä—ñ –Ω–∞ –≤—É–ª–∏—Ü—ñ.",
    "–Ø–∫—â–æ –Ω–µ –ø–æ—â–∞—Å—Ç–∏–ª–æ, –ø–æ—á–µ–∫–∞–π ‚Äì —Å–∫–æ—Ä–æ –ø–æ–≤–µ–∑–µ!",
]

# –õ–æ–≥—É–≤–∞–Ω–Ω—è —É —Ñ–∞–π–ª
logging.basicConfig(filename='bot_log.txt', level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect(DB_FILE, check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    balance INTEGER DEFAULT 0,
    last_bonus INTEGER DEFAULT 0,
    last_card INTEGER DEFAULT 0,
    streak INTEGER DEFAULT 0,
    referrals INTEGER DEFAULT 0,
    tickets INTEGER DEFAULT 0,
    last_active INTEGER DEFAULT 0,
    referral_from INTEGER,
    lottery_participation INTEGER DEFAULT 0
)
''')
conn.commit()

def save_user(user_id, **kwargs):
    fields = ', '.join(f"{k} = ?" for k in kwargs)
    values = list(kwargs.values()) + [user_id]
    cursor.execute(f"UPDATE users SET {fields} WHERE user_id = ?", values)
    conn.commit()

def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        columns = [desc[0] for desc in cursor.description]
        return dict(zip(columns, row))
    return None

def create_user(user_id, referral_from=None):
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, balance, last_bonus, last_card, streak, referrals, tickets, last_active, referral_from, lottery_participation)
        VALUES (?, 0, 0, 0, 0, 0, 0, ?, ?, 0)
    ''', (user_id, int(time.time()), referral_from))
    conn.commit()

def reset_user(user_id):
    cursor.execute('''
        UPDATE users SET balance = 0, last_bonus = 0, last_card = 0, streak = 0, referrals = 0,
        tickets = 0, last_active = ?, referral_from = NULL, lottery_participation = 0
        WHERE user_id = ?
    ''', (int(time.time()), user_id))
    conn.commit()

def check_subscriptions(user_id):
    try:
        for channel in sponsor_channels:
            member = bot.get_chat_member(channel, user_id)
            if member.status in ['left', 'kicked']:
                return False
        return True
    except Exception as e:
        print("Subscription check error:", e)
        return False

def get_channels_buttons():
    markup = telebot.types.InlineKeyboardMarkup()
    for ch in sponsor_channels:
        markup.add(telebot.types.InlineKeyboardButton(text=ch, url=f"https://t.me/{ch.strip('@')}"))
    markup.add(telebot.types.InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subs"))
    return markup

main_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.row('üéÅ –©–æ–¥–µ–Ω–Ω–∏–π —Ñ–∞—Ä—Ç', 'üÉè –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞')
main_keyboard.row('üèÜ –†–æ–∑—ñ–≥—Ä–∞—à—ñ', 'üëØ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
main_keyboard.row('üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', 'üì¢ –°–ø–æ–Ω—Å–æ—Ä–∏ / –ù–æ–≤–∏–Ω–∏')
main_keyboard.row('‚≠êÔ∏è –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤')
main_keyboard.row('üì£ –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –∫–∞–Ω–∞–ª —É Jackpot Pulse')

welcome_text = (
    "<b>üé∞ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ Jackpot Pulse!</b>

"
    "<b>‚úÖ –©–æ —Ç—É—Ç –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è:</b>
"
    "‚Ä¢ üéÅ –©–æ–¥–Ω—è –∑–∞—Ö–æ–¥–∏—à ‚Üí –æ—Ç—Ä–∏–º—É—î—à –±–æ–Ω—É—Å PulseCoins (15‚Äì100)
"
    "‚Ä¢ üÉè –í—ñ–¥–∫—Ä–∏–≤–∞—î—à –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∏ ‚Üí –ª–æ–≤–∏—à –ø—Ä–∏–∑–∏
"
    "‚Ä¢ üëØ –ó–∞–ø—Ä–æ—à—É—î—à –¥—Ä—É–∑—ñ–≤ ‚Üí —â–µ –±—ñ–ª—å—à–µ PulseCoins
"
    "‚Ä¢ üèÜ –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö —Ä–µ–∞–ª—å–Ω–∏—Ö –≥—Ä–æ—à–µ–π

"
    "<b>‚ö†Ô∏è –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –Ω–∞ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏.</b>
"
    "<i>‚ö†Ô∏è –Ø–∫—â–æ –≤—ñ–¥–ø–∏—Å—É—î—à—Å—è –≤—ñ–¥ –±—É–¥—å-—è–∫–æ–≥–æ –∫–∞–Ω–∞–ª—É ‚Äî –≤—Å—ñ –±–æ–Ω—É—Å–∏ —Ç–∞ —É—á–∞—Å—Ç—å –∞–Ω—É–ª—é—é—Ç—å—Å—è!</i>
"
    "<b>üî• –ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–≤—ñ–π —à–ª—è—Ö –¥–æ –¥–∂–µ–∫–ø–æ—Ç—É!</b>"
)

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = message.from_user.id
    ref_id = None
    args = message.text.split()
    if len(args) > 1:
        try:
            ref_id = int(args[1])
        except:
            pass
    user = get_user(user_id)
    if not user:
        create_user(user_id, referral_from=ref_id)
        if ref_id and ref_id != user_id:
            ref_user = get_user(ref_id)
            if ref_user:
                new_referrals = ref_user['referrals'] + 1
                save_user(ref_id, referrals=new_referrals)
                try:
                    bot.send_message(ref_id, f"<b>üéâ –£ —Ç–µ–±–µ –Ω–æ–≤–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª: {message.from_user.first_name} (@{message.from_user.username})</b>")
                except:
                    pass
    else:
        save_user(user_id, last_active=int(time.time()))

    bot.send_message(message.chat.id, welcome_text, reply_markup=main_keyboard)
    bot.send_message(message.chat.id, "<b>üîó –ù–∞—à—ñ –∫–∞–Ω–∞–ª–∏ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏:</b>", reply_markup=get_channels_buttons())

@bot.message_handler(func=lambda m: m.text == 'üéÅ –©–æ–¥–µ–Ω–Ω–∏–π —Ñ–∞—Ä—Ç')
def daily_bonus(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return

    user = get_user(user_id)
    now = int(time.time())
    if now - user['last_bonus'] < 86400:
        bot.send_message(message.chat.id, "<b>üïê –¢–∏ –≤–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ –æ—Ç—Ä–∏–º–∞–≤ —Ñ–∞—Ä—Ç! –ó–∞–≤—ñ—Ç–∞–π –∑–∞–≤—Ç—Ä–∞ üòâ</b>", reply_markup=main_keyboard)
        return

@bot.message_handler(commands=['bonus'])
def give_bonus(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    now = int(time.time())

    if now - user['last_bonus'] < 86400:
        bot.send_message(message.chat.id, "<b>üïê –¢–∏ –≤–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ –æ—Ç—Ä–∏–º–∞–≤ —Ñ–∞—Ä—Ç! –ó–∞–≤—ñ—Ç–∞–π –∑–∞–≤—Ç—Ä–∞ üòâ</b>", reply_markup=main_keyboard)
        return

    bonus = random.randint(15, 100)
    new_balance = user['balance'] + bonus
    new_streak = user['streak'] + 1

    save_user(user_id, balance=new_balance, last_bonus=now, streak=new_streak, last_active=now)

    bot.send_message(message.chat.id,
    f"<b>üîÆ –ü—É–ª—å—Å —É–¥–∞—á—ñ –±‚Äô—î—Ç—å—Å—è —Ä—ñ–≤–Ω–æ üëä</b>
"
    f"<b>+{bonus} PulseCoins üí∏</b>
"
    f"<b>üî• –°—Ç—Ä—ñ–∫:</b> {new_streak} –¥–Ω—ñ(–≤)",
    reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == 'üÉè –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞')
def fart_card(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return

    user = get_user(user_id)
    now = int(time.time())
    if now - user['last_card'] < 86400:
        bot.send_message(message.chat.id, "<b>‚è≥ –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫—É –º–æ–∂–Ω–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –ª–∏—à–µ —Ä–∞–∑ –Ω–∞ –¥–æ–±—É. –ó–∞—Ö–æ–¥—å –∑–∞–≤—Ç—Ä–∞!</b>", reply_markup=main_keyboard)
        return

    outcomes = [
        ("üí∞ <b>+50 PulseCoins!</b>", 50),
        ("üéü <b>–ö–≤–∏—Ç–æ–∫ –Ω–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à!</b>", 0),
        (f"ü§£ <i>{random.choice(jokes)}</i>", 0),
        ("ü§∑‚Äç‚ôÇÔ∏è <b>–ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–ø–∞–ª–æ —Ü—å–æ–≥–æ —Ä–∞–∑—É. –°–ø—Ä–æ–±—É–π —â–µ!</b>", 0)
    ]

    text, coins = random.choice(outcomes)
    tickets = user['tickets'] + 1 if "–ö–≤–∏—Ç–æ–∫" in text else user['tickets']
    balance = user['balance'] + coins if coins > 0 else user['balance']

    save_user(user_id, last_card=now, last_active=now, tickets=tickets, balance=balance)

    bot.send_message(
    message.chat.id,
    f"<b>üÉè –¢–≤–æ—è —Ñ–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞ –ø–æ–∫–∞–∑—É—î:</b>

{text}",
    reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == 'üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å')
def my_profile(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user:
        bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å —â–µ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–∞—Ç–∏—Å–Ω–∏ /start</b>", reply_markup=main_keyboard)
        return

    save_user(user_id, last_active=int(time.time()))

@bot.message_handler(commands=['profile'])
def show_profile(message):
    user_id = message.from_user.id
    user = get_user(user_id)

    bot.send_message(
        message.chat.id,
        f"<b>üìä –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:</b>
"
        f"ü™ô PulseCoins: {user['balance']}
"
        f"üìÜ –°—Ç—Ä—ñ–∫: {user['streak']} –¥–Ω—ñ(–≤)
"
        f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: {user['referrals']}
"
        f"üéü –ö–≤–∏—Ç–∫—ñ–≤ –Ω–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à: {user['tickets']}",
        reply_markup=main_keyboard
    )

@bot.message_handler(func=lambda m: m.text == 'üëØ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
def invite_friend(message):
    user_id = message.from_user.id
    ref_link = f"https://t.me/JackpotPulse_bot?start={user_id}"
    bot.send_message(
        message.chat.id,
        f"<b>üëØ –ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤!</b>
"
        f"üîó –¢–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {ref_link}
"
        f"‚úÖ –ó–∞ –∫–æ–∂–Ω–æ–≥–æ ‚Äî +20 PulseCoins
üéØ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å 3 –¥–Ω—ñ ‚Äî —â–µ +10",
        reply_markup=main_keyboard
    )

@bot.message_handler(func=lambda m: m.text == '‚ú® –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤')
def show_top5(message):
    cursor.execute("SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 5")
    top5 = cursor.fetchall()

    if not top5:
        bot.send_message(message.chat.id, "<b>‚ùå –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤.</b>", parse_mode='HTML')
        return

    text = "<b>üèÜ –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ PulseCoins:</b>
"
    for i, (uid, balance) in enumerate(top5, start=1):
        try:
            user_info = bot.get_chat(uid)
            uname = f"@{user_info.username}" if user_info.username else f"<code>{uid}</code>"
        except Exception:
            uname = f"<code>{uid}</code>"

        text += f"{i}. {uname} ‚Äî {balance}ü™ô PulseCoins
"

    bot.send_message(message.chat.id, text, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == 'üèÜ –†–æ–∑—ñ–≥—Ä–∞—à—ñ')
def lottery(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return

    user = get_user(user_id)
    tickets = user['tickets']

cursor.execute("SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 5")
top5 = cursor.fetchall()

if not top5:
    bot.send_message(message.chat.id, "‚ùå –ù–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤ —É —Ç–æ–ø—ñ.")

text = "<b>üèÜ –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ PulseCoins:</b>
"

for i, (uid, balance) in enumerate(top5, start=1):
    try:
        user_info = bot.get_chat(uid)
        uname = f"@{user_info.username}" if user_info.username else f"<code>{uid}</code>"
    except:
        uname = f"<code>{uid}</code>"

    text += f"{i}. {uname} ‚Äî <b>{balance}</b>ü™ô PulseCoins
"

bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=main_keyboard)

markup = telebot.types.InlineKeyboardMarkup()
markup.add(telebot.types.InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å", callback_data="join_lottery"))
bot.send_message(message.chat.id, info, reply_markup=markup)
